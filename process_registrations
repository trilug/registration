#!/usr/bin/env python3

import cgi
import cgitb
import re
import sqlite3

import process_form
import reg_scrub
from reg_request_db import RegDb
from member         import Member

debugdir = '/tmp'
datadir  = '/var/spool/registration'
dbfile   = '{}/account_queue.db'.format(datadir)

cgitb.enable(display=0, logdir=debugdir)
the_form = cgi.FieldStorage()

print('Content-type: text/html\n')

try:
    reg_db = RegDb(dbfile)

except ConnectionError as ce:
    print('''{start}

<h1>Internal Error</h1>

<p>The registration system is currently unavailable.  Please try back later.</p>

<p>Exception:</br>
{the_error}
</p>

{end}'''.format(start     = process_form.header,
                end       = process_form.footer,
                the_error = ce)
    )

else:
    if "act" not in the_form:

        print(process_form.header)
        
        candidates = []
        for candidate in reg_db.candidates():
            candidates.append(process_form.candidate_template.format(
                *candidate.string_values('print'),
                reqid=candidate.get_reqid()))
        if candidates:
            print(process_form.start_form)
            print('\n'.join(candidates))
            print(process_form.end_form)
        else:
            print('<strong>No pending registration requests.</strong>')

        print(process_form.footer)

    else:
        cleaned_form = reg_scrub.sanitize(the_form)
        #print("<strong>{}</strong></br>".format(cleaned_form))

        deletions     = list(var for var in cleaned_form if 'del_' in var)
        modifications = list(var for var in cleaned_form if 'mod_' in var)
        registrations = list(var for var in cleaned_form if 'reg_' in var)
        
        canceled  = {}
        for deletion in deletions:
            reqid = (deletion.split('_'))[-1]
            canceled[reqid] = True
            try:
                reg_db.delete(reqid)
            except RuntimeError as rte:
                print("<strong>No can delete: {} (id: {})</strong></br>".format(rte, reqid))
            else:
                print("<strong>Request id {} is gawn.</strong></br>".format(reqid))

        for mod in modifications:
            reqid = (mod.split('_'))[-1]
            if not re.search(r'\D', reqid) and reqid not in canceled:
                fields = Member.ordered_field_names()
                for field in fields:
                    val = cleaned_form[field+'_'+reqid]
                    try:
                        reg_db.modify(reqid, field, val)
                    except RuntimeError as rte:
                        print("<strong>Unable to modify: {} (id: {})</strong></br>".format(rte, reqid))
                    else:
                        print("<strong>Modified id {}, field {}. Now: {}</strong></br>".format(
                            reqid, field, val))
            else:
                print("<strong>Unable to modify request id {}: malformed or deleted.</strong></br>".format(reqid))

        # registrations = ...
