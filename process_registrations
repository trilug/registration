#!/usr/bin/env python3

import cgi
import cgitb

import process_form
import reg_scrub
import register

from member         import Member
from reg_request_db import RegDb

debugdir = '/tmp'
cgitb.enable(display=0, logdir=debugdir)

the_form = cgi.FieldStorage()

print('Content-type: text/html\n')

try:
    reg_db = RegDb(register.database)

except ConnectionError as ce:
    print('''{start}

<h1>Internal Error</h1>

<p>The registration system is currently unavailable.  Please try back later.</p>

<p>Exception:</br>
{the_error}
</p>

{end}'''.format(start     = process_form.header,
                end       = process_form.footer,
                the_error = ce)
    )

else:
    if "act" not in the_form:

        print(process_form.header)
        
        candidates = []
        for candidate in reg_db.candidates():
            candidates.append(process_form.candidate_template.format(
                *candidate.string_values('print'),
                reqid=candidate.get_reqid()))
        if candidates:
            print(process_form.start_form)
            print('\n'.join(candidates))
            print(process_form.end_form)
        else:
            print('<strong>No pending registration requests.</strong>')

        print(process_form.footer)

    else:
        cleaned_form = reg_scrub.cleanse_and_validate(the_form)

        deletions     = list(var for var in cleaned_form if 'del_' in var)
        modifications = list(var for var in cleaned_form if 'mod_' in var)
        registrations = list(var for var in cleaned_form if 'reg_' in var)

        if not (deletions or modifications or registrations):
            print("<strong>No action specified, or input malformed.</strong></br>")

        else:
        
            for deletion in deletions:
                reqid = (deletion.split('_'))[-1]
                try:
                    reg_db.delete(reqid)
                except RuntimeError as rte:
                    print("<strong>Unable to cancel request {}: {}</strong></br>".format(
                        reqid, rte))
                else:
                    print("<strong>Request {} canceled.</strong></br>".format(reqid))

            for mod in modifications:
                reqid = (mod.split('_'))[-1]
                fields = Member.ordered_field_names()
                for field in fields:
                    try:
                        val = cleaned_form[field+'_'+reqid]
                    except KeyError:
                        if field != 'addr2':
                            print("<strong>Invalid field: {}</strong></br>".format(field))
                    else:
                        try:
                            reg_db.modify(reqid, field, val)
                        except RuntimeError as rte:
                            print("<strong>Unable to modify: {} (id: {})</strong></br>".format(
                                rte, reqid))
                        else:
                            print("<strong>Modified id {}, field {}. Now: {}</strong></br>".format(
                                reqid, field, val))

            for reg in registrations:
                reqid = (reg.split('_'))[-1]
                try:
                    new_member = reg_db.candidate(reqid)
                except RuntimeError as rte:
                    print("<strong>Unable to fetch request {}: {}</strong></br>".format(
                        reqid, str(rte)))
                else:
                    try:
                        register.add_to_member_db(new_member)
                    except RuntimeError as rte:
                        print("<strong>Unable to add member in request id {} to database: {}</strong></br>".format(
                            reqid, str(rte)))
                    else:
                        try:
                            register.queue_for_shell(new_member)
                        except RuntimeError as rte:
                            print("<strong>Unable to add member in request id {} to shell queue.</strong></br>".format(reqid))

