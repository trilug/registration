#!/usr/bin/env python3

import cgi
import cgitb
import os.path

import process_form
import reg_scrub
import register

from member         import Member
from reg_request_db import RegDb

debugdir = '/tmp'
cgitb.enable(display=0, logdir=debugdir)

the_form = cgi.FieldStorage()

print('''Content-type: text/html

{}'''.format(process_form.header))

try:
    reg_db = RegDb(register.database)

except RuntimeError as re:
    print('''<h1>Internal Error</h1>

<p>The registration system is currently unavailable.  Please try back later.</p>

<p><strong>Exception:</strong></br>
{the_error}
</p>
'''.format(the_error = re)
    )

else:
    if "act" not in the_form:
        candidates = []
        for candidate in reg_db.candidates():
            candidates.append(process_form.candidate_template.format(
                *candidate.string_values('print'),
                reqid=candidate.get_reqid()))
        if candidates:
            print(process_form.start_form)
            print('\n'.join(candidates))
            print(process_form.end_form)
        else:
            print('<strong>No pending registration requests.</strong>')

    else:
        cleaned_form = reg_scrub.cleanse_and_validate(the_form)

        deletions     = list(var for var in cleaned_form if 'del_' in var)
        modifications = list(var for var in cleaned_form if 'mod_' in var)
        registrations = list(var for var in cleaned_form if 'reg_' in var)

        if not (deletions or modifications or registrations):
            print("<strong>No action specified, or input malformed.</strong></br>")

        else:
            if deletions:
                for deletion in deletions:
                    reqid = (deletion.split('_'))[-1]
                    try:
                        reg_db.delete(reqid)
                    except RuntimeError as rte:
                        print("<strong>Unable to cancel request {}: {}</strong></br>".format(
                            reqid, rte))
                    else:
                        print("<strong>Request {} canceled.</strong></br>".format(reqid))
                print("<hr>")

            for mod in modifications:
                reqid = (mod.split('_'))[-1]
                fields = Member.ordered_field_names()
                request_changed = False
                for field in fields:
                    try:
                        val = cleaned_form[field+'_'+reqid]
                    except KeyError:
                        if field != 'addr2':
                            print("<strong>Invalid field: {}</strong></br>".format(field))
                    else:
                        try:
                            altered = reg_db.modify(reqid, field, val)
                        except RuntimeError as rte:
                            print("<strong>Unable to modify: {} (id: {})</strong></br>".format(
                                rte, reqid))
                        else:
                            if altered:
                                request_changed = True
                                print("<strong>Modified request id {}, field {}. Now: {}</strong></br>".format(
                                    reqid, field, val))
                if not request_changed:
                    print("<strong>No changes made to request {}.</strong></br>".format(
                        reqid))
                print("<hr>")

            for reg in registrations:
                reqid = (reg.split('_'))[-1]
                try:
                    new_member = reg_db.candidate(reqid)
                except RuntimeError as rte:
                    print("<strong>Unable to fetch request {}: {}</strong></br>".format(
                        reqid, str(rte)))
                else:
                    try:
                        register.add_to_member_db(new_member)
                    except RuntimeError as rte:
                        print("<strong>Unable to add member in request id {} to database: {}</strong></br>".format(
                            reqid, str(rte)))
                    else:
                        print("<strong>Request id {}: {} added to member db.</strong></br>".format(
                            reqid, new_member.name()))
                        try:
                            register.queue_for_shell(new_member)
                        except RuntimeError as rte:
                            print("<strong>Unable to add member in request id {} to shell queue.</strong></br>".format(reqid))
                        else:
                            print("<strong>Request id {}: {} added to shell request queue.</strong></br>".format(reqid, new_member['username']))


print(process_form.footer.format(os.path.basename(__file__)))

