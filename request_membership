#!/usr/bin/env python3

import sys
sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)

import cgi
import cgitb
import html
import os.path

from lxml.html import fromstring,tostring
from string import Template

import reg_scrub
import register

from member import Member
from reg_request_db import RegDb

debugdir = '/tmp'
cgitb.enable(display=1, logdir=debugdir)

reg_page = fromstring(
        Template(
                open('reg_form.html', 'r').read()
            ).safe_substitute(
                script_name=os.path.basename(__file__)
            ))

the_form = cgi.FieldStorage()
fields = {}
for k in the_form.keys():
    fields[k] = the_form.getfirst(k)

reg_form = reg_page.forms[0]
reg_form.fields.update(fields)

err_elem = reg_page.xpath('//*[@id="exception"]')[0]

if "email" in the_form:
    try:
        reg_db = RegDb(register.database)

    except:
        err_elem.text = 'The registration system is currently unavailable.  Please try back later.'

    else:
        try:
            the_member = Member( {var:html.escape(the_form[var].value)
                         for var in Member.field_names()
                         if var in the_form and reg_scrub.val_ok(the_form[var].value)})

        except TypeError:
            reg_page.xpath('//*[@id="missing"]')[0].set('style', '')

        else:
            try:
                reg_db.insert(the_member)

            except RuntimeError as e:
                err_elem.text = 'Err: {err}'.format(err = str(e))

            else:
                reg_page.xpath('//*[@id="success"]')[0].set('style', '')
                reg_form.clear()

print('''Content-type: text/html; charset=utf-8

''', tostring(reg_page, encoding="unicode"))
